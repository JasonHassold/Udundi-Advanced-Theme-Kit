#!/bin/bash

usage() {
  echo "Usage: atk {command} {options}"
  echo
  echo " Commands:"
  echo
  echo "   Setup: setup {store ex. advanced-theme-kit-tester.myshopify.com} {password}"
  echo
  echo "   Create Branch: branch {branch name}"
  echo "   Delete Branch: branch {branch name} delete"
  echo
  echo "   Watch: watch"
  echo
  echo "   Merge: merge {branch to merge into} {branch being merged}"
}

setup() {
  theme get --list -s=$2 -p=$3
  read -r -p "Theme id (master branch): " theme_id
  theme get -t=$theme_id -s=$2 -p=$3
  wait

  git init

  echo 'config.yml' > .gitignore
  echo 'atk.conf' >> .gitignore
  echo '.gitignore' >> .gitignore

  echo "master=$theme_id" > atk.conf

  git add *
  git commit -m "Initialized"

  read -r -p "Github username: " git_user
  read -r -p "New repo name: " repo_name
  git remote add origin https://github.com/$git_user/$(echo $repo_name | tr ' ' '-').git
  read -r -p "Add repository on github with the same name... " response
  git push -u origin master
}

# $2 branch name
branch() {
  name=$2

  git checkout master
  store=$(cat config.yml | grep store | cut -d ' ' -f 4)
  pass=$(cat config.yml | grep password | cut -d ' ' -f 4)
  theme_id=$(cat config.yml | grep theme_id | cut -d '"' -f 2)
  current_theme_name=$(theme get --list -s=$store -p=$pass | grep $theme_id | cut -d ']' -f 3 | cut -c 2-)
  new_theme_name="$current_theme_name - $name"

  if [ "$3" == 'delete' ]; then
    git branch -D $name
    git push origin --delete $name
    read -r -p "Removed branch theme '$new_theme_name' confirm: " response
  else
    git branch "$name"
    if [ $? -eq 0 ]; then
      echo "Created branch $name"
      git checkout $name

      mkdir temptheme
      cd temptheme
      echo "Moved to /temptheme folder"

      theme new --name="$new_theme_name" -s=$store -p=$pass
      wait

      new_theme_id=$(cat config.yml | grep theme_id | cut -d '"' -f 2)
      cd ..
      rm -r temptheme/
      echo "$name=$new_theme_id" >> atk.conf
      ed -i "s/$theme_id/$new_theme_id/g" config.yml
      sed -i "s/$theme_id/$new_theme_id/g" config.yml
      # cd ..
      # cp temptheme/config.yml config.yml
      # rm -r temptheme/

      git add *
      git commit -m "Created new theme branch '$new_theme_name'"
      git push --set-upstream origin "$name"

      theme deploy
    fi
  fi
}

switch() {
  current_branch=$(git branch | grep '*' | cut -d ' ' -f 2)
  new_branch=$2
  current_branch_id=$(cat atk.conf | grep $current_branch | cut -d '=' -f 2)
  new_branch_id=$(cat atk.conf | grep $new_branch | cut -d '=' -f 2)
  git checkout $new_branch
  if [ "$current_branch" != "$new_branch" ]; then
    sed -i "s/$current_branch_id/$new_branch_id/g" config.yml
  fi
}

watch() {
  git pull
  theme watch
  wait
  git add *
  echo
  read -r -p "Commit message: " message
  git commit -m "$message"
  git push
}

merge() {
  switch "$@"
  echo "WAIT FOR ALL CHANGES -> CTRL+C -> Q" > merge.log
  theme watch >> merge.log 2>&1 &
  theme_watch_PID=$!
  sleep 5
  if git merge $3 | grep -q 'fix conflicts'; then
    read -r -p "Continue once you fix conflicts... " response
  fi
  # tail -f merge.log
  #while cat; do sleep 1; done < merge.log
  less +F merge.log
  rm merge.log
  # git add *

  # renamed_added_files=$(git status | grep 'renamed' | rev | cut -d " " -f 1 | rev)
  # renamed_deleted_files=$(git status | grep 'renamed' | rev | cut -d ">" -f 2 | cut -d ' ' -f 2 | rev)
  # added_modified_files="$(git status | grep 'modified\|new file' | rev | cut -d " " -f 1 | rev) $renamed_added_files"
  # deleted_files="$(git status | grep 'deleted' | rev | cut -d " " -f 1 | rev) $renamed_deleted_files"

  # read -r -p "Commit message (wait for theme watch): " message
  # git commit -m "$message"
  git push


  # for file in $added_modified_files; do
  #   echo "Added/Modified $file"
  #   theme deploy $file
  # done
  # for file in $deleted_files; do
  #   echo "Deleted $file"
  #   theme remove $file
  # done
}


case $1 in
  -h | --help) usage ;;
  setup)
    setup "$@"
    ;;
  branch)
    branch "$@"
    ;;
  switch)
    switch "$@"
    ;;
  watch)
    watch "$@"
    ;;
  merge)
    merge "$@"
    ;;
esac
