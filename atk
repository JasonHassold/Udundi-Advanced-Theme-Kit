#!/bin/bash

usage() {
  echo -e "Usage: atk \e[96m{command}\e[39m {options}"
  echo
  echo " Commands:"
  echo
  echo -e "   \e[33mSetup\e[39m: \e[96msetup\e[39m {store ex. advanced-theme-kit-tester.myshopify.com} {password}"
  echo -e "            \e[90m-downloads live theme and sets up github repository with the live theme as the master branch\e[39m"
  echo -e "          \e[96msetup\e[39m {store ex. advanced-theme-kit-tester.myshopify.com} {password} select"
  echo -e "            \e[90m-downloads selected theme and sets up github repository with the selected theme as the master branch\e[39m"
  echo
  echo -e "   \e[33mGet\e[39m: \e[96mget\e[39m {github repo URL} {store ex. advanced-theme-kit-tester.myshopify.com} {password}"
  echo -e "          \e[90m-gets an existing repository with live theme as master\e[39m"
  echo -e "        \e[96mget\e[39m {github repo URL} {store ex. advanced-theme-kit-tester.myshopify.com} {password} select"
  echo -e "          \e[90m-gets an existing repository with selected theme as master\e[39m"
  echo
  echo -e "   \e[33mSync\e[39m: \e[96msync\e[39m"
  echo -e "      \e[90m-syncs any new remote branches\e[39m"
  echo
  echo -e "   \e[33mList Branches\e[39m: \e[96mbranch\e[39m"
  echo -e "   \e[33mCreate Branch\e[39m: \e[96mbranch\e[39m {branch name}"
  echo -e "   \e[33mDelete Branch\e[39m: \e[96mbranch\e[39m {branch name} delete"
  echo
  echo -e "   \e[33mSwitch Branch\e[39m: \e[96mswitch\e[39m {branch name}"
  echo
  echo -e "   \e[33mWatch\e[39m: \e[96mwatch\e[39m"
  echo
  echo -e "   \e[33mMerge\e[39m: \e[96mmerge\e[39m {this branch} {into this branch}"
  echo
}


done=true


setup() {
  done=false

  # Check if you are in a theme folder
  if test -f "config.yml"; then
    # Lists themes and asks for theme ID
    master_theme_id=$(cat config.yml | grep 'theme_id' | cut -d '"' -f 2)
    read -r -p "You are in a theme folder, using theme ID from config.yml file... " response
  else
    # Create folder and move into it
    read -r -p "Folder name: " folder
    folder=${folder// /-}
    folder=${folder//[^a-zA-Z0-9-]/}
    mkdir $folder
    cd $folder

    if [ "$4" == "select" ]; then
      # Lists themes and asks for theme ID
      theme get --list -s="$2" -p="$3"
      read -r -p "Theme ID to use as master: " master_theme_id
    else
      # Get live theme ID
      theme_list=$(theme get --list -s="$2" -p="$3")
      master_theme_id=$(echo "$theme_list" | grep "\[live\]" | cut -d ']' -f 1 | cut -d '[' -f 2)
    fi
    # Download theme
    theme get -t="$master_theme_id" -s="$2" -p="$3"
    wait
  fi

  # Initialize repo
  git init

  # Create .gitignore
  echo 'config.yml' > .gitignore
  echo 'atk.conf' >> .gitignore
  echo '.gitignore' >> .gitignore

  # Create atk.conf - this file is used to store branch theme IDs
  echo "master=$master_theme_id" > atk.conf

  # Create remote repo and push all changes
  git add *
  git commit -m "Initialized"
  read -r -p "Github username or org: " git_user
  read -r -p "New repo name: " repo_name
  git remote add origin https://github.com/$git_user/$(echo $repo_name | tr ' ' '-').git
  read -r -p "Add repository on github with the same name (press enter when done)... " response
  git push -u origin master

  done=true
}


setupCleanup() {
  rm -rf .git
  rm .gitignore
  rm atk.conf
  echo
  echo -e "\e[91mCleaning up\e[39m"
  read -r -p "$(echo -e "\e[91mRemove repository from github if created (press enter when done)... \e[39m")" response
}



# Used by get() and sync()
initBranchTracking() {
  # Add tracking for other branches
  # Add branch theme IDs to atk.conf
  local_branches=$(git branch --all -vv | grep -v "master" | grep -v "remotes" | cut -d ' ' -f 3)
  remote_branches=$(git branch --all -vv | grep -v "master" | grep  "remotes" | cut -d ' ' -f 3 | cut -d '/' -f 3)

  store=$(cat config.yml | grep "store" | cut -d ' ' -f 4)
  pass=$(cat config.yml | grep "password" | cut -d ' ' -f 4)
  theme_list=$(theme get --list -s="$store" -p="$pass")
  mater_theme_name=$(echo "$theme_list" | grep "\[live\]" | cut -d ' ' -f 4-)

  echo "$remote_branches" | while read branch; do
    if [[ ! "${local_branches[@]}" =~ "${branch}" ]]; then
      git branch --track "$branch" "origin/$branch"
    fi
    if [[ ! $(cat atk.conf) =~ "${branch}" ]]; then
      id=$(echo "$theme_list" | grep "$master_theme_name - $branch" | cut -d ']' -f 1 | cut -d '[' -f 2)

      echo "$branch=$id" >> atk.conf
    fi
  done
}



get() {
  # Clone theme repo
  git clone $2

  # Move into new repo folder
  cd $(echo $2 | rev | cut -d '/' -f 1 | rev | cut -d '.' -f 1)

  # Create .gitignore
  echo 'config.yml' > .gitignore
  echo 'atk.conf' >> .gitignore
  echo '.gitignore' >> .gitignore

  # Get theme list
  theme_list=$(theme get --list -s="$3" -p="$4")
  if [ "$4" == "select" ]; then
    # Lists themes and asks for theme ID
    echo "$theme_list"
    read -r -p "Theme ID to use as master: " master_theme_id
    master_theme_name=$(echo "$theme_list" | grep "$master_theme_id" | cut -d ' ' -f 4-)
  else
    # Get live theme name and ID
    mater_theme_name=$(echo "$theme_list" | grep "\[live\]" | cut -d ' ' -f 4-)
    master_theme_id=$(echo "$theme_list" | grep "\[live\]" | cut -d ']' -f 1 | cut -d '[' -f 2)
  fi

  # Create atk.conf - this file is used to store branch theme IDs
  echo "master=$master_theme_id" > atk.conf

  # Set up config file for master theme
  theme configure -s="$3" -p="$4" -t="$master_theme_id"

  initBranchTracking
}



sync() {
  switch _ master

  git pull

  initBranchTracking

  git pull --all
}



branch() {
  # If no branch arguments
  if [ $# == 1 ]; then
    # List branches
    git branch
  else
    name=$2

    switch _ master

    # Get master theme name and generate new branch theme name
    store=$(cat config.yml | grep store | cut -d ' ' -f 4)
    pass=$(cat config.yml | grep password | cut -d ' ' -f 4)
    master_theme_id=$(cat atk.conf | grep "master" | cut -d '=' -f 2)
    master_theme_name=$(theme get --list -s="$store" -p="$pass" | grep $master_theme_id | cut -d ' ' -f 4-)
    new_theme_name="$master_theme_name - $name"

    if [ "$3" == 'delete' ]; then
      # Delete local branch
      git branch -D $name
      # Delete remote branch
      git push origin --delete $name
      # Remove atk.conf branch line
      echo "$(sed "/$name=/d" atk.conf)" > atk.conf
      # Prompts user to delete theme
      read -r -p "Removed branch theme '$new_theme_name' (press enter to confirm)... " response
    else
      # Create git branch
      git branch "$name"
      # If not error
      if [ $? -eq 0 ]; then
        # Make temp folder and move into it
        mkdir temptheme
        cd temptheme

        # Generate new theme in folder
        theme new --name="$new_theme_name" -s="$store" -p="$pass"
        wait

        # Get new theme ID and remove temp theme folder
        new_theme_id=$(cat config.yml | grep 'theme_id' | cut -d '"' -f 2)
        cd ..
        rm -r temptheme/

        # Add new branch theme ID to atk.conf and switch
        echo "$name=$new_theme_id" >> atk.conf
        switch _ $name

        # Create/Push remote branch
        git add *
        git commit -m "Created new theme branch '$new_theme_name'"
        git push --set-upstream origin "$name"

        theme deploy
      fi
    fi
  fi
}



switch() {
  new_branch=$2

  # If new_branch is a branch
  if [[ $(git branch | tr '*' ' ') == *"$new_branch"* ]]; then

    new_branch_id=$(cat atk.conf | grep "$new_branch" | cut -d '=' -f 2)
    current_branch=$(git branch | grep '*' | cut -d ' ' -f 2)
    current_branch_id=$(cat config.yml | grep "theme_id" | cut -d '"' -f 2)

    # If var current_branch_id is empty
    if [ -z $current_branch_id ]; then
      # Pull from atk.conf instead of config.yml
      current_branch_id=$(cat atk.conf | grep "$current_branch" | cut -d '=' -f 2)
      # Replace empty ID in config.yml
      sed -i "s/\"\"/\"$current_branch_id\"/g" config.yml
    elif [ "$current_branch_id" != "$new_branch_id" ]; then
      # Replace theme ID in config.yml
      sed -i "s/$current_branch_id/$new_branch_id/g" config.yml
    fi

    # Switch to branch
    git checkout $new_branch
  else
    echo "Not a branch"
  fi
}



# $1 = branch receiving merge
# $2 = branch being merged
# mergeHelper() {
#   switch _ $1
#
#   read -r -p "$(echo -e "\e[91mMake sure 'atk merge watch' is fully running or switches... \e[39m")" response
#
#   # Git merge and wait for merge conflicts to be fixed
#   if git merge $2 | grep -q 'fix conflicts'; then
#     git status
#     read -r -p "$(echo -e "\e[33mContinue once you fix conflicts... \e[39m")" response
#     git add *
#     git commit -m "Fix merge"
#   fi
#
#   git push
# }



watch() {
  # Pull any changes
  git pull
  # Provides link to preview
  theme open
  # Use theme watch to update theme with any changes changes
  theme watch
  # Wait until user cancels because theme watch runs as a background process
  wait
  # If changes have been made
  if [[ ! $(git status) == *"nothing to commit"* ]]; then
    # Add all changes, commit, and push
    git add *
    echo
    read -r -p "$(echo -e "\e[95mCommit message: \e[39m")" message
    git commit -m "$message"
    git push
  fi
}


merge() {
  git pull
  if [ "$2" == "watch" ]; then
    echo -e "\e[91mWait for all file changes to be update!\e[39m"
    theme watch
  else
    read -r -p "$(echo -e "\e[33mAs a precaution you might want to duplicate the master theme (press enter to continue)... \e[39m")" response
    read -r -p "$(echo -e "\e[91mClose out of any atk watches for this theme (press enter to continue)... \e[39m")" response

    switch _ $2

    git pull

    # Switch to branch that changes are being merged into
    switch _ $3

    git pull

    read -r -p "Run '\e[91matk merge watch\e[39m' in another tab (press enter to continue)... " response

    # Git merge and wait for merge conflicts to be fixed
    if git merge $2 | grep -q 'fix conflicts'; then
      read -r -p "$(echo -e "\e[33mContinue once you fix conflicts... \e[39m")" response
      git add *
      git commit -m "Fix merge"
    fi

    git push
  fi
}



# merge() {
#   if [ "$2" == "watch" ]; then
#     echo -e "\e[91mWait for all file changes to be update!\e[39m"
#     theme watch
#   else
#     read -r -p "$(echo -e "\e[33mAs a precaution you might want to duplicate the master theme (press enter to continue)... \e[39m")" response
#
#     switch _ master
#
#     git pull
#
#     mergeHelper $2 master
#
#     mergeHelper master $2
#   fi
# }



# Used to cleanup if exited early
cleanup() {
  if [ "$done" = "false" ]; then
    case "$1" in
      setup)
        setupCleanup "$@"
        ;;
    esac
  fi
}


# On exit run cleanup()
trap 'cleanup "$@"' err exit


case "$1" in
  -h | --help | help)
    usage
    ;;
  setup)
    setup "$@"
    ;;
  get)
    get "$@"
    ;;
  sync)
    sync "$@"
    ;;
  branch)
    branch "$@"
    ;;
  switch)
    switch "$@"
    ;;
  watch)
    watch "$@"
    ;;
  merge)
    merge "$@"
    ;;
esac
