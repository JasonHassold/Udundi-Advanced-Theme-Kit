#!/bin/bash

usage() {
  echo -e "Usage: atk \e[96m{command}\e[39m {options}"
  echo
  echo " Commands:"
  echo
  echo -e "   \e[33mSetup\e[39m: \e[96msetup\e[39m {store ex. advanced-theme-kit-tester.myshopify.com} {password}"
  echo -e "      \e[90m-downloads live theme and sets up github repository with the live theme as the master branch\e[39m"
  echo
  echo -e "   \e[33mGet\e[39m: \e[96mget\e[39m {github repo URL} {store ex. advanced-theme-kit-tester.myshopify.com} {password}"
  echo -e "      \e[90m-gets an existing repository\e[39m"
  echo
  echo -e "   \e[33mSync\e[39m: \e[96msync\e[39m"
  echo -e "      \e[90m-syncs any new remote branches\e[39m"
  echo
  echo -e "   \e[33mList Branches\e[39m: \e[96mbranch\e[39m"
  echo -e "   \e[33mCreate Branch\e[39m: \e[96mbranch\e[39m {branch name}"
  echo -e "   \e[33mDelete Branch\e[39m: \e[96mbranch\e[39m {branch name} delete"
  echo
  echo -e "   \e[33mSwitch Branch\e[39m: \e[96mswitch\e[39m {branch name}"
  echo
  echo -e "   \e[33mWatch\e[39m: \e[96mwatch\e[39m"
  echo
  echo -e "   \e[33mMerge\e[39m: \e[96mmerge\e[39m {branch to merge into} {branch being merged}"
  echo
}


setup() {
  # Create folder and move into it
  read -r -p "Folder name: " folder
  mkdir $folder
  cd $folder

  # Get live theme
  theme_list=$(theme get --list -s="$2" -p="$3")
  master_theme_id=$(echo $theme_list | grep "\[live\]" | cut -d ']' -f 1 | cut -d '[' -f 2)
  theme get -t=$master_theme_id -s="$2" -p="$3"
  wait

  # Initialize repo
  git init

  # Create .gitignore
  echo 'config.yml' > .gitignore
  echo 'atk.conf' >> .gitignore
  echo '.gitignore' >> .gitignore

  # Create atk.conf - this file is used to store branch theme IDs
  echo "master=$master_theme_id" > atk.conf

  # Create remote repo and push all changes
  git add *
  git commit -m "Initialized"
  read -r -p "Github username or org: " git_user
  read -r -p "New repo name: " repo_name
  git remote add origin https://github.com/$git_user/$(echo $repo_name | tr ' ' '-').git
  read -r -p "Add repository on github with the same name (press any key when done)... " response
  git push -u origin master
}


initBranchTracking() {
  # Add tracking for other branches
  # Add branch theme IDs to atk.conf
  local_branches=$(git branch --all -vv | grep -v "master" | grep -v "remotes" | cut -d ' ' -f 3)
  remote_branches=$(git branch --all -vv | grep -v "master" | grep  "remotes" | cut -d ' ' -f 3 | cut -d '/' -f 3)

  store=$(cat config.yml | grep "store" | cut -d ' ' -f 4)
  pass=$(cat config.yml | grep "password" | cut -d ' ' -f 4)
  theme_list=$(theme get --list -s="$store" -p="$pass")
  mater_theme_name=$(echo $theme_list | grep "\[live\]" | rev | cut -d ']' -f 1 | rev)

  echo "$remote_branches" | while read branch; do
    if [[ ! "${local_branches[@]}" =~ "${branch}" ]]; then
      git branch --track "$branch" "origin/$branch"
    fi
    if [[ ! $(cat atk.conf) =~ "${branch}" ]]; then
      id=$(echo "$theme_list" | grep "$master_theme_name - $branch" | cut -d ']' -f 1 | cut -d '[' -f 2)

      echo "$branch=$id" >> atk.conf
    fi
  done
}


get() {
  # Clone theme repo
  git clone $2

  # Move into new repo folder
  cd $(echo $2 | rev | cut -d '/' -f 1 | rev | cut -d '.' -f 1)

  # Create .gitignore
  echo 'config.yml' > .gitignore
  echo 'atk.conf' >> .gitignore
  echo '.gitignore' >> .gitignore

  # Get master theme name and id
  theme_list=$(theme get --list -s=$3 -p=$4)
  mater_theme_name=$(echo $theme_list | grep "\[live\]" | rev | cut -d ']' -f 1 | rev)
  master_theme_id=$(echo $theme_list | grep "\[live\]" | cut -d ']' -f 1 | cut -d '[' -f 2)

  # Create atk.conf - this file is used to store branch theme IDs
  echo "master=$master_theme_id" > atk.conf

  # Set up config file for master theme
  theme configure -s=$3 -p=$4 -t=$master_theme_id

  initBranchTracking
}


sync() {
  switch _ master

  git pull

  initBranchTracking
}


branch() {
  # If no branch arguments
  if [ $# == 1 ]; then
    # List branches
    git branch
  else
    name=$2

    switch _ master

    # Get master theme name and generate new branch theme name
    store=$(cat config.yml | grep store | cut -d ' ' -f 4)
    pass=$(cat config.yml | grep password | cut -d ' ' -f 4)
    theme_id=$(cat config.yml | grep theme_id | cut -d '"' -f 2)
    master_theme_name=$(theme get --list -s=$store -p=$pass | grep $theme_id | cut -d ']' -f 3 | cut -c 2-)
    new_theme_name="$master_theme_name - $name"

    if [ "$3" == 'delete' ]; then
      # Delete local branch
      git branch -D $name
      # Delete remote branch
      git push origin --delete $name
      # Remove atk.conf branch line
      sed "/$name=/d" atk.conf
      # Prompts user to delete theme
      read -r -p "Removed branch theme '$new_theme_name' (press any key to confirm)... " response
    else
      # Create git branch
      git branch "$name"
      # If not error
      if [ $? -eq 0 ]; then
        # Make temp folder and move into it
        mkdir temptheme
        cd temptheme

        # Generate new theme in folder
        theme new --name="$new_theme_name" -s=$store -p=$pass
        wait

        # Get new theme ID and remove temp theme folder
        new_theme_id=$(cat config.yml | grep theme_id | cut -d '"' -f 2)
        cd ..
        rm -r temptheme/

        # Add new branch theme ID to atk.conf and switch
        echo "$name=$new_theme_id" >> atk.conf
        switch _ $name

        # Create/Push remote branch
        git add *
        git commit -m "Created new theme branch '$new_theme_name'"
        git push --set-upstream origin "$name"

        theme deploy
      fi
    fi
  fi
}


switch() {
  new_branch=$2
  new_branch_id=$(cat atk.conf | grep "$new_branch" | cut -d '=' -f 2)
  current_branch=$(git branch | grep '*' | cut -d ' ' -f 2)
  current_branch_id=$(cat config.yml | grep "theme_id" | cut -d '"' -f 2)

  # Switch to branch
  git checkout $new_branch

  # If var current_branch_id is empty
  if [ $current_branch_id -z ]; then
    # Pull from atk.conf instead of config.yml
    current_branch_id=$(cat atk.conf | grep "$current_branch" | cut -d '=' -f 2)
    # Replace empty ID in config.yml
    sed -i "s/\"\"/\"$current_branch_id\"/g" config.yml
  elif [ "$current_branch_id" != "$new_branch_id" ]; then
    # Replace theme ID in config.yml
    sed -i "s/$current_branch_id/$new_branch_id/g" config.yml
  fi
}


watch() {
  # Pull any changes
  git pull
  # Use theme watch to update theme with any changes changes
  theme watch
  # Wait until user cancels because theme watch runs as a background process
  wait
  # Add all changes, commit, and push
  git add *
  echo
  read -r -p "Commit message: " message
  git commit -m "$message"
  git push
}


merge() {
  # Switch to branch that changes are being merged into
  switch _ $2

  # Git merge and wait for merge conflicts to be fixed
  if git merge $3 | grep -q 'fix conflicts'; then
    read -r -p "Continue once you fix conflicts... " response
  fi

  theme deploy

  git push
}


case "$1" in
  -h | --help | help)
    usage
    ;;
  setup)
    setup "$@"
    ;;
  get)
    get "$@"
    ;;
  sync)
    sync "$@"
    ;;
  branch)
    branch "$@"
    ;;
  switch)
    switch "$@"
    ;;
  watch)
    watch "$@"
    ;;
  merge)
    merge "$@"
    ;;
esac
