#!/bin/bash

usage() {
  echo -e "Usage: atk \e[96m{command}\e[39m {options}"
  echo
  echo " Commands:"
  echo
  echo -e "   \e[33mSetup\e[39m: \e[96msetup\e[39m {store ex. advanced-theme-kit-tester.myshopify.com} {password}"
  echo -e "      \e[90m-downloads a selected theme and sets up github repository\e[39m"
  echo
  echo -e "   \e[33mGet\e[39m: \e[96mget\e[39m {github repo URL} {store ex. advanced-theme-kit-tester.myshopify.com} {password}"
  echo -e "      \e[90m-gets an existing repository\e[39m"
  echo
  echo -e "   \e[33mList Branches\e[39m: \e[96mbranch\e[39m"
  echo -e "   \e[33mCreate Branch\e[39m: \e[96mbranch\e[39m {branch name}"
  echo -e "   \e[33mDelete Branch\e[39m: \e[96mbranch\e[39m {branch name} delete"
  echo
  echo -e "   \e[33mSwitch Branch\e[39m: \e[96mswitch\e[39m {branch name}"
  echo
  echo -e "   \e[33mWatch\e[39m: \e[96mwatch\e[39m"
  echo
  echo -e "   \e[33mMerge\e[39m: \e[96mmerge\e[39m {branch to merge into} {branch being merged}"
  echo
}

setup() {
  theme get --list -s=$2 -p=$3
  read -r -p "Theme id (master branch): " theme_id
  theme get -t=$theme_id -s=$2 -p=$3
  wait

  git init

  echo 'config.yml' > .gitignore
  echo 'atk.conf' >> .gitignore
  echo '.gitignore' >> .gitignore

  echo "master=$theme_id" > atk.conf

  git add *
  git commit -m "Initialized"

  read -r -p "Github username: " git_user
  read -r -p "New repo name: " repo_name
  git remote add origin https://github.com/$git_user/$(echo $repo_name | tr ' ' '-').git
  read -r -p "Add repository on github with the same name... " response
  git push -u origin master
}

get() {
  git clone $2

  cd $(echo $2 | rev | cut -d '/' -f 1 | rev | cut -d '.' -f 1)

  for branch in $(git branch --all | grep '^\s*remotes' | egrep --invert-match '(:?HEAD|master)$'); do
    git branch --track "${branch##*/}" "$branch"
  done

  echo 'config.yml' > .gitignore
  echo 'atk.conf' >> .gitignore
  echo '.gitignore' >> .gitignore

  theme_list=$(theme get --list -s=$3 -p=$4)
  mater_theme_name=$(echo $theme_list | grep "[live]" | rev | cut -d ']' -f 1 | rev)
  master_theme_id=$(echo $theme_list | grep "[live]" | cut -d ']' -f 1 | cut -d '[' -f 2)

  echo "master=$master_theme_id" > atk.conf

  git branch | while read line; do
    branch_name=$(echo "$line" | rev | cut -d ' ' -f 1 | rev | xargs)
    branch_theme_name="$master_theme_name - $branch_name"
    if [ "$(echo $branch_name)" != "master" ]; then
      id=$(echo "$theme_list" | grep "$branch_theme_name"  | cut -d ']' -f 1 | cut -d '[' -f 2)
      echo "$branch_name=$id" >> atk.conf
    fi
  done

  theme configure -s=$3 -p=$4 -t=$master_theme_id
}

branch() {
  if [ $# == 1 ]; then
    git branch
  else
    name=$2

    git checkout master
    store=$(cat config.yml | grep store | cut -d ' ' -f 4)
    pass=$(cat config.yml | grep password | cut -d ' ' -f 4)
    theme_id=$(cat config.yml | grep theme_id | cut -d '"' -f 2)
    current_theme_name=$(theme get --list -s=$store -p=$pass | grep $theme_id | cut -d ']' -f 3 | cut -c 2-)
    new_theme_name="$current_theme_name - $name"

    if [ "$3" == 'delete' ]; then
      git branch -D $name
      git push origin --delete $name
      sed "/$name=/d" atk.conf
      read -r -p "Removed branch theme '$new_theme_name' confirm: " response
    else
      git branch "$name"
      if [ $? -eq 0 ]; then
        echo "Created branch $name"
        git checkout $name

        mkdir temptheme
        cd temptheme
        echo "Moved to /temptheme folder"

        theme new --name="$new_theme_name" -s=$store -p=$pass
        wait

        new_theme_id=$(cat config.yml | grep theme_id | cut -d '"' -f 2)
        cd ..
        rm -r temptheme/
        echo "$name=$new_theme_id" >> atk.conf
        ed -i "s/$theme_id/$new_theme_id/g" config.yml
        sed -i "s/$theme_id/$new_theme_id/g" config.yml
        # cd ..
        # cp temptheme/config.yml config.yml
        # rm -r temptheme/

        git add *
        git commit -m "Created new theme branch '$new_theme_name'"
        git push --set-upstream origin "$name"

        theme deploy
      fi
    fi
  fi
}

switch() {
  current_branch=$(git branch | grep '*' | cut -d ' ' -f 2)
  new_branch=$2
  current_branch_id=$(cat config.yml | grep theme_id | cut -d '"' -f 2)
  new_branch_id=$(cat atk.conf | grep $new_branch | cut -d '=' -f 2)
  git checkout $new_branch
  if [ "$current_branch_id" != "$new_branch_id" ]; then
    sed -i "s/$current_branch_id/$new_branch_id/g" config.yml
  fi
}

watch() {
  git pull
  theme watch
  wait
  git add *
  echo
  read -r -p "Commit message: " message
  git commit -m "$message"
  git push
}

merge() {
  switch "$@"

  if git merge $3 | grep -q 'fix conflicts'; then
    read -r -p "Continue once you fix conflicts... " response
  fi

  theme deploy

  git push
}


case $1 in
  -h | --help | help) usage ;;
  setup)
    setup "$@"
    ;;
  get)
    get "$@"
    ;;
  branch)
    branch "$@"
    ;;
  switch)
    switch "$@"
    ;;
  watch)
    watch "$@"
    ;;
  merge)
    merge "$@"
    ;;
esac
